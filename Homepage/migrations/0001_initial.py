# Generated by Django 3.2.10 on 2022-11-04 08:52

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Companies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('about', models.TextField()),
            ],
            options={
                'verbose_name': 'Companies',
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'Courses',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
            options={
                'verbose_name': 'Departments',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Drives',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Drive name', max_length=256)),
                ('drive_type', models.PositiveSmallIntegerField(choices=[(1, 'Virtual'), (2, 'On Campus'), (3, 'Off Campus')], help_text='Enter type of drive')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('drive_on', models.DateField(help_text='Enter in the following format : YYYY-MM-DD')),
                ('stream_required', models.PositiveSmallIntegerField(choices=[(1, 'MCA'), (2, 'BCA'), (3, 'B Tech')])),
                ('batch_year', models.IntegerField(default=2022, verbose_name='year')),
                ('eligibility', models.IntegerField(blank=True)),
                ('position', models.CharField(blank=True, max_length=255)),
                ('job_profile', models.CharField(blank=True, max_length=255)),
                ('job_type', models.PositiveSmallIntegerField(choices=[(1, 'WFH'), (2, 'Full Time'), (3, 'Internship')])),
                ('job_location', models.CharField(blank=True, max_length=255)),
                ('date_of_joining', models.DateField()),
                ('stipend_package', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Drives',
                'verbose_name_plural': 'Drives',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=256, unique=True)),
                ('first_name', models.CharField(max_length=128)),
                ('last_name', models.CharField(max_length=128)),
                ('dob', models.DateField(blank=True, null=True)),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Male'), (2, 'Female'), (3, 'Other')], null=True)),
                ('mobile', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('address', models.TextField(help_text='Enter address')),
                ('city', models.CharField(help_text='Enter City', max_length=50)),
                ('pincode', models.CharField(help_text='Enter pincode', max_length=6)),
                ('state', models.CharField(help_text='Enter state', max_length=50)),
                ('ssc', models.CharField(blank=True, max_length=128, null=True)),
                ('ssc_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ssc_percentage', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ssc_cgpa', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('hssc', models.CharField(blank=True, max_length=128, null=True)),
                ('hssc_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('hssc_percentage', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('hssc_cgpa', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ug', models.CharField(blank=True, max_length=128, null=True)),
                ('ug_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ug_percentage', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ug_cgpa', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('pg', models.CharField(blank=True, max_length=128, null=True)),
                ('pg_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('pg_percentage', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('pg_cgpa', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('salary', models.PositiveIntegerField(blank=True, null=True)),
                ('is_student', models.BooleanField(default=False)),
                ('is_coordinator', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('course_name', models.ManyToManyField(blank=True, related_name='course_name', to='Homepage.Course')),
                ('department_name', models.ManyToManyField(blank=True, related_name='department_name', to='Homepage.Departments')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('placed_in', models.ManyToManyField(blank=True, related_name='placed_in', to='Homepage.Companies')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Users',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Responses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Homepage.drives')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Homepage.user')),
            ],
            options={
                'verbose_name': 'Responses',
                'verbose_name_plural': 'Responses',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Homepage.departments'),
        ),
    ]
